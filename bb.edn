{:paths ["scripts"]

 :deps {medley/medley
        {:mvn/version "1.3.0"}
        lread/status-line
        {:git/url "https://github.com/lread/status-line.git"
         :sha     "cf44c15f30ea3867227fa61ceb823e5e942c707f"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as p]
             [lread.status-line :as status])

;; pandoc -F pandoc-plantuml -t slidy -s malli-model-function-hackathon-2024.md -o malli-model-function-hackathon-2024.html --metadata=plantuml-format=svg

  type-check
  {:doc  "Task to typed check some of the namespaces"
   :task (do
           (status/line :head "type-checking")
           (time
            (clojure "-M:dev:type-check")))}

  clean
  {:doc  "Cleans the temp build files"
   :task (do
           (status/line :head "clean")
           (fs/delete-tree "target")
           (fs/delete-if-exists "junit.xml")
           (fs/delete-if-exists "docs.html"))}

  test
  {:doc  "Runs the projects with kocha"
   :task (do
           (status/line :head "running-tests")
           (time
            (clojure "-M:jvm-base:dev:tests")))}

  lint
  {:doc  "Lints the code base with clj-kondo"
   :task (do
           (status/line :head "running-lint")
           (time
            (clojure "-M:lint -m clj-kondo.main --lint src test")))}

  main {:doc "Run the main command line inteface"
        :task (clojure "-M:main")}

  outdated
  {:doc  "Run command to detect outdate version of our deps"
   :task (clojure "-M:dev:outdated -m depot.outdated.main")}

  doc-codox
  {:doc  "Builds codox documentation"
   :task (clojure "-X:dev:codox")}
  doc-hiera
  {:doc  "Builds hiera documentation"
   :task (clojure "-X:dev:hiera")}

  doc-pandoc
  {:doc "Build pandoc"
   :task (do (shell
              "pandoc -F pandoc-plantuml
                docs/metadata.yml -f markdown
                --toc --template docs/template.html -t html -o docs.html
                docs/001-introduction.md"))}

  test-pdoc
  {:doc "Test pandoc transform"
   :task (do (shell "pandoc -f markdown -t json readme.md -o readme.json")
             (-> (p/process "cat readme.json")
                 (p/process {:out :string} "bin/t-pandoc")
                 (deref)
                 (:out)
                 (println)))}

  nrepl
  {:doc  "Run a nRepl"
   :task (clojure
          "-M:jvm-base:dev:nrepl" "-m" "nrepl.cmdline")}

  fmt
  {:doc  "Fix format clojure code"
   :task
   (do
     (clojure "-M:dev:format -m cljstyle.main fix scripts src dev"))}

  fmt-check
  {:doc  "Check format clojure code"
   :task
   (do
     (clojure "-M:dev:format -m cljstyle.main check scripts src dev"))}

  docs
  {:doc  "Builds all documentation"
   :task (do (run 'doc-codox)
             (run 'doc-hiera))}

  ci
  {:doc  "Runs linting and tests for the CI"
   :task (do (run 'clean)
             (run 'fmt-check)
             (run 'type-check)
             (run 'test))}}}
